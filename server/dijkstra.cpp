#include "dijkstra.h"

// Функция для выполнения алгоритма Дейкстры, чтобы найти кратчайший путь
// от вершины s до вершины t в графе, представленном матрицей смежности graph.
int dijkstra(int s, int t, std::vector<std::vector<int>>& graph) {
    int n = graph.size(); // Количество вершин в графе
    std::vector<int> dist(n, INF); // Массив для хранения кратчайших расстояний от вершины s до каждой вершины
    dist[s] = 0; // Расстояние от вершины s до самой себя равно 0
    std::vector<bool> used(n, false); // Массив для отслеживания посещённых вершин

    // Пока не будет посещена вершина t
    while (!used[t]) {
        int v = -1;
        // Находим вершину с минимальным расстоянием, которая ещё не была посещена
        for (int i = 0; i < n; i++) {
            if (!used[i] && (v == -1 || dist[i] < dist[v])) {
                v = i;
            }
        }

        // Если такой вершины не существует (все оставшиеся вершины недостижимы), выходим из цикла
        if (v == -1) {
            break;
        }

        used[v] = true; // Помечаем найденную вершину как посещённую

        // Обновляем расстояния до смежных вершин
        for (int u = 0; u < n; u++) {
            // Если существует путь из v в u и расстояние до u через v меньше текущего
            if (graph[v][u] != INF && dist[u] > dist[v] + graph[v][u]) {
                dist[u] = dist[v] + graph[v][u]; // Обновляем расстояние
            }
        }
    }

    return dist[t]; // Возвращаем кратчайшее расстояние до вершины t
}
